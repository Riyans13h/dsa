/ ‚úÖ Problem:
// You are given a rows x cols matrix grid representing a field of cherries, each cell containing some cherries.
// Two robots start from the top row, one at column 0 and the other at column cols - 1.
// Each robot moves to the row below in one of three directions: down-left, down, or down-right.
// If both robots land on the same cell, only one gets the cherries.
// Maximize the total number of cherries collected by both robots when reaching the bottom row.

// =============================
// MEMOIZATION CODE
// =============================

class Solution {
public:
    int collection(int i, int j1, int j2, int row, int col, vector<vector<int>>& grid, vector<vector<vector<int>>>& dp) {
        // üõë Base condition: out of bounds
        if (j1 < 0 || j2 < 0 || j1 >= col || j2 >= col) return -1e9;

        // ‚úÖ If last row, collect cherries
        if (i == row - 1) {
            if (j1 == j2) return grid[i][j1];
            return grid[i][j1] + grid[i][j2];
        }

        // üîÅ If already computed
        if (dp[i][j1][j2] != -1) return dp[i][j1][j2];

        int maxi = -1e9;
        for (int dj1 = -1; dj1 <= 1; dj1++) {
            for (int dj2 = -1; dj2 <= 1; dj2++) {
                int value = 0;
                if (j1 == j2) value = grid[i][j1];
                else value = grid[i][j1] + grid[i][j2];

                value += collection(i + 1, j1 + dj1, j2 + dj2, row, col, grid, dp);
                maxi = max(maxi, value);
            }
        }

        return dp[i][j1][j2] = maxi;
    }

    int cherryPickup(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();

        vector<vector<vector<int>>> dp(row, vector<vector<int>>(col, vector<int>(col, -1)));
        return collection(0, 0, col - 1, row, col, grid, dp);
    }
};

// üî¢ Time Complexity (Memoization): O(row * col * col * 9) = O(row * col^2)
// üß† Space Complexity: O(row * col * col) for dp + recursion stack


// =============================
// TABULATION CODE (BOTTOM-UP)
// =============================

class TabulationSolution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();

        vector<vector<vector<int>>> dp(row, vector<vector<int>>(col, vector<int>(col, 0)));

        // üß± Base case: last row
        for (int j1 = 0; j1 < col; j1++) {
            for (int j2 = 0; j2 < col; j2++) {
                if (j1 == j2) dp[row - 1][j1][j2] = grid[row - 1][j1];
                else dp[row - 1][j1][j2] = grid[row - 1][j1] + grid[row - 1][j2];
            }
        }

        // üîÅ Bottom-up DP
        for (int i = row - 2; i >= 0; i--) {
            for (int j1 = 0; j1 < col; j1++) {
                for (int j2 = 0; j2 < col; j2++) {
                    int maxi = -1e9;
                    for (int dj1 = -1; dj1 <= 1; dj1++) {
                        for (int dj2 = -1; dj2 <= 1; dj2++) {
                            int nj1 = j1 + dj1;
                            int nj2 = j2 + dj2;
                            if (nj1 >= 0 && nj1 < col && nj2 >= 0 && nj2 < col) {
                                int value = (j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2];
                                value += dp[i + 1][nj1][nj2];
                                maxi = max(maxi, value);
                            }
                        }
                    }
                    dp[i][j1][j2] = maxi;
                }
            }
        }

        return dp[0][0][col - 1];
    }
};

// üî¢ Time Complexity (Tabulation): O(row * col^2 * 9) = O(row * col^2)
// üß† Space Complexity: O(row * col^2) for dp





